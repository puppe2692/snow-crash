$ ls -la
total 16
dr-xr-x---+ 1 level11 level11  120 Mar  5  2016 .
d--x--x--x  1 root    users    340 Aug 30  2015 ..
-r-x------  1 level11 level11  220 Apr  3  2012 .bash_logout
-r-x------  1 level11 level11 3518 Aug 30  2015 .bashrc
-rwsr-sr-x  1 flag11  level11  668 Mar  5  2016 level11.lua
-r-x------  1 level11 level11  675 Apr  3  2012 .profile


$ cat level11.lua
#!/usr/bin/env lua
local socket = require("socket")
local server = assert(socket.bind("127.0.0.1", 5151))

function hash(pass)
  prog = io.popen("echo "..pass.." | sha1sum", "r")
  data = prog:read("*all")
  prog:close()

  data = string.sub(data, 1, 40)

  return data
end


while 1 do
  local client = server:accept()
  client:send("Password: ")
  client:settimeout(60)
  local l, err = client:receive()
  if not err then
      print("trying " .. l)
      local h = hash(l)

      if h ~= "f05d1d066fb246efe0c6f7d095f909a7a0cf34a0" then
          client:send("Erf nope..\n");
      else
          client:send("Gz you dumb*\n")
      end

  end

  client:close()
end

Le script contient une fonction qui accepte un argument appele pass 
La fonction hash appelle une fonction appelee io.popen, popen execute l'argument qui lui est passe dans le shell, puis le resultat est lu et retourne Ã  l'appelant.
Il y a aussi une boucle infinie qui accepte toutes les connexions de socket entrantes et demande le mot de passe :
SI un mot de passe est fourni, elle appelle la fonction de hachage avec le mot de passe comme argument et compare les 2 hash, si le resultat est incorrect, 
Gz you dumb* s'affiche si le resultat est correct et la connexion se ferme


~$ nc localhost 5151
Password: $(getflag) > /tmp/flag11
Erf nope..
~$ cd /tmp
/tmp$ cat flag11
Check flag.Here is your token : 
/tmp$ 
