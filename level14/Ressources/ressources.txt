~$ ls -la
total 12
dr-x------ 1 level14 level14  100 Mar  5  2016 .
d--x--x--x 1 root    users    340 Aug 30  2015 ..
-r-x------ 1 level14 level14  220 Apr  3  2012 .bash_logout
-r-x------ 1 level14 level14 3518 Aug 30  2015 .bashrc
-r-x------ 1 level14 level14  675 Apr  3  2012 .profile
~$ find / -user level13 2> /dev/null | grep -v /proc
~$ find / -user level13 2> /dev/null


on a rien, il va falloir directement exploiter getflag:
avec gdb:
(gdb) run
Starting program: /bin/getflag 
You should not reverse this
[Inferior 1 (process 16726) exited with code 01]

On peut pas exploit comme a l exercice d avant:

(gdb) disass main
Dump of assembler code for function main:
x08048989 <+67>:	call   0x8048540 <ptrace@plt>
0x08048afd <+439>:	call   0x80484b0 <getuid@plt>

ici c est ptrace qui empeche le reverse, mais on peut le contourner:
https://gist.github.com/poxyran/71a993d292eee10e95b4ff87066ea8f2

(gdb) catch syscall ptrace
Catchpoint 1 (syscall 'ptrace' [26])
(gdb) commands 1
Type commands for breakpoint(s) 1, one per line.
End with a line saying just "end".
>set ($eax) = 0
>continue
>end

il utilise getuid pour savoir le token a donner, 
on va se faire passer pour flag14 et recuperer son id:
$ id flag14
uid=3014(flag14) gid=3014(flag14) groups=3014(flag14),1001(flag)

On va modifier la valeur de retour de getuid avec celui de flag14 comme a l'exercice d avant:
(gdb) run
Starting program: /bin/getflag 

Catchpoint 1 (call to syscall ptrace), 0xb7fdd428 in __kernel_vsyscall ()

Catchpoint 1 (returned from syscall ptrace), 0xb7fdd428 in __kernel_vsyscall ()

Breakpoint 2, 0xb7ee4cc0 in getuid () from /lib/i386-linux-gnu/libc.so.6
(gdb) step
Single stepping until exit from function getuid,
which has no line number information.
0x08048b02 in main ()
(gdb) print $eax
$1 = 2014
(gdb) set $eax=3014
(gdb) step
Single stepping until exit from function main,
which has no line number information.
Check flag.Here is your token : 
